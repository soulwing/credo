<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings xmlns="http://xmlns.jcp.org/xml/ns/persistence/orm"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/persistence/orm http://xmlns.jcp.org/xml/ns/persistence/orm_2_1.xsd"
  version="2.1">
  
  <named-query name="findUserProfileByLoginName">
    <query>
      select distinct u from UserProfileEntity u
      where u.loginName = :loginName
    </query>
  </named-query>

  <named-query name="findGroupByName">
    <query>
      select distinct g from UserGroupEntity g
      where g.name = :groupName
    </query>
  </named-query>

  <named-query name="findGroupSelf">
    <query>
      select distinct g from UserGroupMemberEntity gm
      inner join gm.group g
      inner join gm.user u
      where u.loginName = :loginName
      and g.name is null
    </query>
  </named-query>
  
  <named-query name="findGroupsByLoginName">
    <query>
      select distinct g from UserGroupMemberEntity gm
      inner join gm.group g
      inner join gm.user u
      where u.loginName = :loginName
    </query>
  </named-query>

  <named-query name="findGroupMemberWithGroupAndLoginName">
    <query>
      select distinct gm from UserGroupMemberEntity gm
      inner join gm.group g
      inner join gm.user u
      where u.loginName = :loginName
      and g.name = :groupName
    </query>
  </named-query>
  
  <named-query name="findGroupMemberSelf">
    <query>
      select distinct gm from UserGroupMemberEntity gm
      inner join gm.group g
      inner join gm.user u
      where u.loginName = :loginName
      and g.name is null
    </query>
  </named-query>
  
  <named-query name="findTagByText">
    <query>
      select distinct t from TagEntity t
      where t.text = :text
    </query>
  </named-query>
  
  <named-query name="findCredentialById">
    <query>
      select distinct c from CredentialEntity c
      inner join fetch c.privateKey
      inner join fetch c.owner
      left outer join fetch c.tags
      left outer join fetch c.certificates
      where c.id = :id
    </query>  
  </named-query>
  
  <named-query name="findAllCredentialsByLoginName">
    <query>
      select distinct c from CredentialEntity c
      left outer join fetch c.tags t
      where exists (
        select distinct g from UserGroupMemberEntity gm
        inner join gm.group g
        inner join gm.user u
        where u.loginName = :loginName
        and gm.group = c.owner
      )      
      order by c.name
    </query>
  </named-query>

</entity-mappings>